name: ci

on:
  push:
    tags:
      - "v*"
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
      - uses: Swatinem/rust-cache@v1
      - run: cargo install cargo-make
      - run: cargo make test-ci --verbose

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
      - uses: Swatinem/rust-cache@v1
      - run: cargo fmt --check --verbose

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
      - uses: Swatinem/rust-cache@v1
      - run: cargo clippy --all-targets --all-features --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
          - TARGET: aarch64-apple-darwin
            OS: macos-latest
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
          # - TARGET: x86_64-pc-windows-msvc
          #   OS: windows-latest
    runs-on: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
      - name: Configure sccache
        uses: visvirial/sccache-action@v1
        with:
          arch: ${{ matrix.TARGET }}
      - name: Install cross
        run: cargo install cross --force
      - name: Run build
        run: cross build --release --verbose --target ${{ matrix.TARGET }}
      - name: Compress (unix)
        if: startsWith(matrix.OS, 'ubuntu') || startsWith(matrix.OS, 'macos')
        run: |
          mkdir -p ./artifacts

          zip -jr9 ./artifacts/lsctl-${{ matrix.TARGET }}.zip ./target/${{ matrix.TARGET }}/release/lsctl
      - name: Compress (windows)
        if: startsWith(matrix.OS, 'windows')
        run: |
          New-Item -Path artifacts -ItemType directory

          Compress-Archive -CompressionLevel Optimal -Force -Path target/${{ matrix.TARGET }}/release/lsctl.exe -DestinationPath artifacts/lsctl-${{ matrix.TARGET }}.zip
      - name: List release files
        if: startsWith(matrix.OS, 'ubuntu') || startsWith(matrix.OS, 'macos')
        run: find ./artifacts/
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: result
          path: |
            ./artifacts

  release:
    needs: [test, format, clippy, build]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: result
          path: ./artifacts
      - name: List release files
        run: find ./artifacts/
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ github.ref }}
          draft: false
          generate_release_notes: true
          files: ./artifacts/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: NPM Publish
        run: |
          cd npm
          npm config set '//registry.npmjs.org/:_authToken' "${{ secrets.NPM_TOKEN }}"
          npm publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-v2:
    runs-on: ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - os: windows-latest
            rust: stable
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v2
      - name: Configure sccache
        uses: visvirial/sccache-action@v1
        with:
          arch: ${{ matrix.target }}
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"
      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
      - name: Install musl-tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y
      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
      - name: Build (MacOS)
        if: matrix.os == 'macos-latest'
        run: cargo build --release
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
      - name: Create tarball (Unix)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mkdir -p ./artifacts-v2

          zip -jr9 ./artifacts-v2/lsctl-${{ matrix.target }}.zip ./target/${{ matrix.target }}/release/lsctl
      - name: Create tarball (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          New-Item -Path artifacts -ItemType directory

          Compress-Archive -CompressionLevel Optimal -Force -Path target/${{ matrix.target }}/release/lsctl.exe -DestinationPath artifacts/lsctl-${{ matrix.target }}.zip
      - name: List release files
        if: startsWith(matrix.OS, 'ubuntu') || startsWith(matrix.OS, 'macos')
        run: find ./artifacts-v2/
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: result
          path: |
            ./artifacts-v2