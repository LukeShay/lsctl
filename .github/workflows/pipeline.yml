name: Rust

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: test-cargo-registry
      - name: List
        run: find ./
      - name: Run tests
        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-latest
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
          - TARGET: aarch64-apple-darwin
            OS: macos-latest
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest
    needs: test
    runs-on: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: lsctl-${{ matrix.TARGET }}
      - name: Install cross
        run: cargo install cross
      - name: Run build
        run: cross build --release --verbose --target ${{ matrix.TARGET }}
      - name: Compress (linux)
        if: startsWith(matrix.OS, 'ubuntu') || startsWith(matrix.OS, 'macos')
        run: |
          mkdir -p ./artifacts

          zip ./artifacts/${{ env.NAME }}-${{ env.TARGET }}.zip ./target/${{ env.TARGET }}/release/${{ env.NAME }}
      - name: Compress (windows)
        if: startsWith(matrix.OS, 'windows')
        run: |
          New-Item -Path artifacts -ItemType directory

          Compress-Archive -CompressionLevel Optimal -Force -Path target/${{ env.TARGET }}/release/${{ env.NAME }}.exe -DestinationPath artifacts/${{ env.NAME }}-${{ env.TARGET }}.zip
      - name: List release files
        run: find ./artifacts/
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: result
          path: |
            ./artifacts

  release:
    needs: build
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: result
          path: ./artifacts
      - name: List release files
        run: find ./artifacts/
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ github.ref }}
          draft: false
          generate_release_notes: true
          files: ./artifacts/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
